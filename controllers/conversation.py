from telegram.ext import (
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler
)
from telegram import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from models.order import OrderModel
import json
import re


class ConversationController:
    PHONE, ADDRESS, COMMENT = range(3)

    def __init__(self, order_controller, admin_controller, cart_controller):
        self.order_controller = order_controller
        self.admin_controller = admin_controller
        self.cart_controller = cart_controller

    def get_confirm_order_conversation(self):
        # –®–∞–≥–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞

        confirm_order_conversation = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(self.start_confirm_order_conversation_handler, pattern='^conversation.*$')],
            states={
                self.PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.phone_handler)],
                self.ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.address_handler)],
                self.COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.comment_handler)],
            },
            fallbacks=[CallbackQueryHandler(self.callback_cancel_confirm_order, pattern='^conversation_cancel$')],
        )

        return confirm_order_conversation

    @staticmethod
    async def callback_cancel_confirm_order(update, context):
        await update.message.reply_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.")
        return ConversationHandler.END

    async def phone_handler(self, update, context):
        user_phone = update.message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX, –≥–¥–µ X - —Ü–∏—Ñ—Ä–∞
        pattern = r'^(?:\+7\d{10}|8\d{10})$'
        if bool(re.match(pattern, user_phone)):
            context.user_data['phone'] = user_phone  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            await update.message.reply_text(
                f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_phone}."
                f" –¢–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å (–¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É):")
            return self.ADDRESS
        else:
            await update.message.reply_text(
                f"–ù–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {user_phone}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX/89XXXXXXXXXX:")
            return self.PHONE

    async def address_handler(self, update, context):
        user_address = update.message.text
        context.user_data['address'] = user_address  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
        await update.message.reply_text(f"–í–∞—à –∞–¥—Ä–µ—Å: {user_address}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:")
        return self.COMMENT

    async def comment_handler(self, update, context):
        user_comment = update.message.text
        context.user_data['comment'] = user_comment  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–∫–∞–∑
        user = update.message.from_user
        user_cart_products = self.cart_controller.get_products(user_id=user.id)
        dict_cart_products = {}
        for cart_product in user_cart_products:
            dict_cart_products[cart_product.product.name] = cart_product.quantity

        order = await self.order_controller.add(
            user=user,
            phone=context.user_data['phone'],
            address=context.user_data['address'],
            comment=user_comment,
            json_products=json.dumps(dict_cart_products)
        )

        start_button = InlineKeyboardButton('üè†', callback_data='button_start')
        menu_button = InlineKeyboardButton('üìú –ú–µ–Ω—é', callback_data='button_menu')
        user_orders_button = InlineKeyboardButton('üõçÔ∏è –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data='button_orders')
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–∞
        await update.message.reply_text(
            f"–í–∞—à –∑–∞–∫–∞–∑ {order.label} –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        start_button,
                        menu_button,
                        user_orders_button
                    ]
                ],
            )
        )

        order_details = {
            'id': order.id,
            'username': user.name,
            'phone': order.phone,
            'address': order.address,
            'comment': order.comment,
            'label': order.label,
            'json_products': json.dumps(dict_cart_products)
        }
        self.cart_controller.clear(user.id)
        await self.admin_controller.send_admin_new_order_notice(order_details, context=context)

        return ConversationHandler.END

    async def start_confirm_order_conversation_handler(self, update, context):
        query = update.callback_query
        if self.cart_controller.get_products(user_id=query.from_user.id):
            await query.answer()
            if 'confirm_order' in query.data:
                await update.callback_query.edit_message_text(
                    text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 –∏–ª–∏ 89:"
                )
                return self.PHONE
        else:
            await query.answer()
            pass
